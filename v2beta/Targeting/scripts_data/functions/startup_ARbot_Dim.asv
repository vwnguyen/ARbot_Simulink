%% Environment Parameters

load('footage_v3_array.mat');
box_dim1 = [.05 .05 .05];
out_length = 0;
rotation_matrix = [4.44089209850063e-16,0.939692620785909,-0.342020143325669;-1.00000000000000,4.44089209850063e-16,0;0,0.342020143325669,0.939692620785909];

% box parameters
box1_dim = [0.170036163091660 0.182921404933929 0.0254/2];
box2_dim = [0.184457923913002 0.172139129447937 0.0254/2];
box3_dim = [0.055932275152206 0.103630726337433 0.0254/2];
box4_dim = [0.110056496906281 0.147900141429901 0.0254/2];
box5_dim = [0.121905452680588 0.165243265843391 0.0254/2];
cube_d =.09; % 2inch cube
cube_con_rsph=.003; % radius of contact sphere block and belt

% floor parameters
floor_l=3;
floor_d=.05;

% pixels to meters
pix_2_m = 0.21875*0.0254; % pix->in->m
%{
Variables needed by the ARbot simulink file
%}

%% Conveyor Belt Parameters
belt_l=30;
belt_h=.2;
belt_w=1.1225;
belt_spd=1.1295; % m/s
belt_in_offset=[1.4 0 0];

% camera frame parameters
camera_frame_dist = 3;  % meters away from catching line

%% box parameters
box_angle_offset = [20 0 0]; % vector of xyz angle rotations from world to box
box_z_offset = -0.15+cube_d/2;
% position vectors of the box with reference to the camera frame
box1_pos_offset = [(box1_dim(1)/2 + (belt_w - 0.606314102578163) ) (box1_dim(2)/2 + (belt_w - 0.761613922548294) ) box_z_offset ]; %time 0
box2_pos_offset = [(box2_dim(1)/2 + (belt_w - 0.272408337676525) ) (box2_dim(2)/2 + (belt_w - 1.07917752695084 + 0.4232) - (belt_spd*(2.66666666666664)) ) box_z_offset  ]; % time 2.667
box3_pos_offset = [(box3_dim(1)/2 + (belt_w - 0.617604686427116) ) (box3_dim(2)/2 + (belt_w - 0.982776597929001 + 0.4578) - (belt_spd*(7.66666666666666)) ) box_z_offset ]; % time 7.667
box4_pos_offset = [(box4_dim(1)/2 + (belt_w - 0.855067375230789) ) (box4_dim(2)/2 + (belt_w - 1.02983778786659 + 0.4359) - (belt_spd*(10.7333333333335))) box_z_offset ]; % time 10.733
box5_pos_offset = [(box5_dim(1)/2 + (belt_w - 0.683449123024940) ) (box5_dim(2)/2 + (belt_w - 0.107290405601263 + 0.4276) - (belt_spd*(16.2000000000004)) ) box_z_offset ]; % time 16.200


shelf_pos_offset = [1.1811 1 -0.3255];
shelf_angle_offset = [90 20 90];

guard1_pos_offset = [0 0 0];
guard1_angle_offset = [270 0 90];

guard2_pos_offset = [1.1811 0 0];
guard2_angle_offset = [270 0 90];

bin_pos_offset = [1.52 1.4 .5];
bin_angle_offset = [110 180 0];

box_xyz_pos_offset = [.5588 1.15 -0.37];
box_xyz_angle_offset = [160 0 90];

% arm_pos_offset = [1.1811 1 -0.6];
% arm_angle_offset = [90 20 90];

belt_pos_offset = [1.135 -1.4 -.85];
belt_angle_offset = [180 200 -90];
%% Trajectory Parameters
% joint configurations
% from base to camera

% camera_frame_dist is the distance from the camera to the catching line
P_B_CORG = [  -2.2596;  0.5639; -1.2102;];
robot_base_to_camera_frame_rot = [  0.0000    0.9397   -0.3420;
                                    -1.0000    0.0000         0;
                                    0    0.3420    0.9397;];
P_C =           [ box1_pos_offset; 
                 box2_pos_offset; 
                 box3_pos_offset;
                 box4_pos_offset;
                 box5_pos_offset];
             
% append a column of ones for matrix transformation calculations
P_C(:,4) = 1;             


T_A_B = [ 0 0 0 0;
          0 0 0 0;
          0 0 0 0;
          0 0 0 1;
          ];
      
eeOrientation = deg2rad(-70);

% where at the catching line it should end effector go 
% P_B = [ belt_w / 2; 0; 0; 1;];
% T_A_B(1:3,1:3) = rotation_matrix;
% T_A_B(1:3,4) = P_A_BORG;
% P_A = T_A_B * P_B; % vector from the base of the robot to the target

%% Test Array
testing_array = [ 1.25 5 8 11];
time_array=[ 0
            2.6670
            7.6670
           10.7330
           16.2000];  % when targets are spotted at the camera frame

eeOrientation = deg2rad(-70);
ikSol = inverseKineRBT(P_A(1),P_A(2),P_A(3),eeOrientation);

% th=traj6_v2(q0,qv,qf,2,1);                  % generate the trajectory